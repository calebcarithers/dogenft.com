import { Comic_Neue } from "@next/font/google";
import { css } from "dsl/helpers/css";
import Head from "next/head";
import { PropsWithChildren, useState } from "react";
import { create } from "zustand";

const comicNeue = Comic_Neue({
  weight: ["400", "700"],
  subsets: ["latin"],
  variable: "--font-comic-neue",
});

export default function Home() {
  const [value, setValue] = useState("");
  const store = useStore();
  return (
    <>
      <Head>
        <title>Doge GPT</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main
        className={css(
          "p-4",
          "flex",
          "justify-center",
          "grow",
          "bg-pixels-yellow-100",
          comicNeue.className
        )}
      >
        <div className={css("max-w-3xl", "w-full", "flex", "flex-col")}>
          <div
            className={css("flex", "gap-2", "items-center", "justify-center")}
          >
            <span className={css("font-bold", "text-3xl")}>Doge GPT</span>
          </div>
          <div className={css("grow", "mt-4", "flex", "flex-col")}>
            <div
              className={css(
                "grow",
                "border-[1px]",
                "border-black",
                "flex",
                "flex-col"
              )}
            >
              {store.prompts.map((item, index) => (
                <div key={`${item.prompt}-${index}`}>
                  <div className={css("p-2", "bg-pixels-yellow-200")}>
                    {item.prompt}
                  </div>
                  <div className={css("p-2", "bg-pixels-yellow-300")}>
                    <div>{item.response}</div>
                    <div
                      className={css(
                        "text-xs",
                        "text-right",
                        "text-pixels-yellow-500"
                      )}
                    >
                      {item.date.toLocaleString()}
                    </div>
                  </div>
                </div>
              ))}
            </div>
            <div className={css("mt-2")}>
              <form
                onSubmit={(e) => {
                  e.preventDefault();
                  if (value !== "") {
                    console.log("submit values", value);
                    store.post(value);
                    setValue("");
                  }
                }}
              >
                <input
                  name={"search"}
                  className={css(
                    "w-full",
                    "border-[1px]",
                    "border-black",
                    "px-2",
                    "py-1",
                    "outline-none"
                  )}
                  placeholder={"wow, ask me a question"}
                  value={value}
                  onChange={(e) => setValue(e.target.value)}
                />
              </form>
            </div>
          </div>
        </div>
      </main>
    </>
  );
}

const BlockText: React.FC<PropsWithChildren<{ className: string }>> = ({
  className,
  children,
}) => {
  return (
    <span className={css("p-1", "border-[1px]", "border-black", className)}>
      {children}
    </span>
  );
};

interface Store {
  prompts: { prompt: string; response: string; date: Date }[];
  post: (prompt: string) => void;
}

const useStore = create<Store>((set) => ({
  prompts: [],
  post: async (prompt: string) => {
    try {
      const res = await fetch("http://localhost:5000/prompt", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ prompt }),
      });
      const { data } = await res.json();
      set((prev) => ({
        prompts: [
          ...prev.prompts,
          { prompt, response: data, date: new Date() },
        ],
      }));
      console.log("debug:: json", data);
    } catch (e) {}
  },
}));
