import { Comic_Neue } from "@next/font/google";
import ColoredText from "dsl/components/ColoredText/ColoredText";
import { css } from "dsl/helpers/css";
import Head from "next/head";
import { FormEvent, useEffect, useRef, useState } from "react";
import { PulseLoader } from "react-spinners";
import { create } from "zustand";

const comicNeue = Comic_Neue({
  weight: ["400", "700"],
  subsets: ["latin"],
  variable: "--font-comic-neue",
});

export default function Home() {
  const [value, setValue] = useState("");
  const [isLoading, setIsLoading] = useState(false);
  const lastMessageRef = useRef<HTMLDivElement>(null);
  const loadingRef = useRef<HTMLDivElement>(null);

  const store = useStore();
  const handleFormSubmit = (e: FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    if (value !== "") {
      setIsLoading(true);
      store.post(value).finally(() => {
        setIsLoading(false);
        lastMessageRef.current?.scrollIntoView();
      });
      setValue("");
    }
  };

  useEffect(() => {
    if (isLoading) {
      loadingRef.current?.scrollIntoView();
    }
  }, [isLoading]);

  return (
    <>
      <Head>
        <title>DogeGPT</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main
        className={css(
          "p-6",
          "flex",
          "justify-center",
          "grow",
          "bg-center",
          "bg-repeat",
          comicNeue.className
        )}
        style={{ backgroundImage: `url(images/kabosu.png)` }}
      >
        <div className={css("max-w-3xl", "w-full", "flex", "flex-col")}>
          <div
            className={css("flex", "gap-2", "items-center", "justify-center")}
          >
            <ColoredText bold className={css("text-5xl")}>
              ✨ DogeGPT ✨
            </ColoredText>
          </div>
          <div className={css("grow", "mt-4", "flex", "flex-col")}>
            <div
              className={css(
                "grow",
                "rounded-2xl",
                "bg-[#efe8d3]",
                "flex",
                "flex-col",
                "p-4",
                "gap-4",
                "overflow-y-auto",
                "max-h-[80vh]"
              )}
            >
              {store.prompts.map((item, index, arr) => (
                <div
                  key={`${item.prompt}-${index}`}
                  ref={arr.length - 1 === index ? lastMessageRef : undefined}
                >
                  <div
                    className={css(
                      "p-3",
                      "bg-pixels-yellow-300",
                      "rounded-2xl",
                      "md:mr-24",
                      "mr-4"
                    )}
                  >
                    {item.prompt}
                  </div>
                  <div
                    className={css(
                      "p-3",
                      "bg-pixels-yellow-100",
                      "rounded-2xl",
                      "md:ml-24",
                      "ml-4",
                      "mt-4"
                    )}
                  >
                    <div>{item.response}</div>
                    <div
                      className={css(
                        "text-xs",
                        "text-right",
                        "text-pixels-yellow-500",
                        "mt-0.5"
                      )}
                    >
                      {item.date.toLocaleString()}
                    </div>
                  </div>
                </div>
              ))}
              {isLoading && (
                <div
                  className={css("flex", "justify-center", "mt-4")}
                  ref={loadingRef}
                >
                  <PulseLoader size={6} color={"#d2cbbb"} />
                </div>
              )}
            </div>
            <div className={css("mt-2")}>
              <form onSubmit={handleFormSubmit}>
                <input
                  name={"search"}
                  className={css(
                    "w-full",
                    "px-4",
                    "py-3",
                    "outline-none",
                    "bg-[#efe8d3]",
                    "rounded-2xl",
                    "placeholder:text-pixels-yellow-400",
                    "font-bold"
                  )}
                  placeholder={"wow, you can ask me anything"}
                  value={value}
                  onChange={(e) => setValue(e.target.value)}
                />
              </form>
            </div>
          </div>
        </div>
      </main>
    </>
  );
}

interface Store {
  prompts: { prompt: string; response: string; date: Date }[];
  post: (prompt: string) => Promise<any>;
}

const useStore = create<Store>((set) => ({
  prompts: [
    {
      prompt: "wow! what exactly is this thing??",
      response:
        "\n\nWow! Such an amazing thing! Much mystery and intrigue! Very fascinating! So many questions! Amaze!",
      date: new Date(),
    },
    {
      prompt: "how do you screw in a lightbulb??",
      response: "\n\nWow! Such lightbulb! Much screw! Very twist! Amaze turn!",
      date: new Date(),
    },
    {
      prompt: "can you tell me something else pls",
      response: "\n\nWow! Such amaze! Much fun! Very happy!",
      date: new Date(),
    },
    {
      prompt: "what about more",
      response:
        "\n\nWow, such amaze! Much beauty in this world, very inspiring. Such creativity, so much to see. Wow, much beauty!",
      date: new Date(),
    },
    {
      prompt: "more more I say more!!!!!",
      response:
        "\n\nWow! Such much amaze! Very more I say more! Much enthusiasm! Much excitement! So much to say! Much wow! Much more! Much wow! Much more! Such much more! So much more to say! Much wow! Very much more! Much more I say more! Amaze!",
      date: new Date(),
    },
    {
      prompt: "give it to me liveeeeee too",
      response: "\n\nWow, much energy! Such vibes! Very doge! So amaze!",
      date: new Date(),
    },
  ],
  post: async (prompt: string) => {
    try {
      const prodBaseUrl = "https://doge-gpt-cea4f69d8b2b.herokuapp.com";
      const res = await fetch(`${prodBaseUrl}/prompt`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ prompt }),
      });
      const { data } = await res.json();
      set((prev) => ({
        prompts: [
          ...prev.prompts,
          { prompt, response: data, date: new Date() },
        ],
      }));
      console.log("debug:: json", data);
    } catch (e) {}
  },
}));
