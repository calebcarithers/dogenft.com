import { Comic_Neue } from "@next/font/google";
import ColoredText from "dsl/components/ColoredText/ColoredText";
import { css } from "dsl/helpers/css";
import Head from "next/head";
import { FormEvent, useEffect, useRef, useState } from "react";
import { PulseLoader } from "react-spinners";
import { create } from "zustand";

const comicNeue = Comic_Neue({
  weight: ["400", "700"],
  subsets: ["latin"],
  variable: "--font-comic-neue",
});

export default function Home() {
  const [value, setValue] = useState("");
  const [isLoading, setIsLoading] = useState(false);
  const lastMessageRef = useRef<HTMLDivElement>(null);
  const loadingRef = useRef<HTMLDivElement>(null);

  const store = useStore();
  const handleFormSubmit = (e: FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    if (value !== "") {
      store.post(value).finally(() => {
        lastMessageRef.current?.scrollIntoView();
      });
      setValue("");
    }
  };

  useEffect(() => {
    if (isLoading) {
      loadingRef.current?.scrollIntoView();
    }
  }, [isLoading]);

  return (
    <>
      <Head>
        <title>DogeGPT</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main
        className={css(
          "p-6",
          "flex",
          "justify-center",
          "grow",
          "bg-center",
          "bg-repeat",
          comicNeue.className
        )}
        style={{ backgroundImage: `url(images/kabosu.png)` }}
      >
        <div className={css("max-w-3xl", "w-full", "flex", "flex-col")}>
          <div
            className={css("flex", "gap-2", "items-center", "justify-center")}
          >
            <ColoredText bold className={css("text-5xl")}>
              ✨ DogeGPT ✨
            </ColoredText>
          </div>
          <div className={css("grow", "mt-4", "flex", "flex-col")}>
            <div
              className={css(
                "grow",
                "rounded-2xl",
                "bg-[#efe8d3]",
                "flex",
                "flex-col",
                "p-4",
                "gap-4",
                "overflow-y-auto",
                "max-h-[80vh]"
              )}
            >
              {store.prompts.map((item, index, arr) => (
                <div
                  key={`${item.prompt}-${index}`}
                  ref={arr.length - 1 === index ? lastMessageRef : undefined}
                >
                  <div
                    className={css(
                      "p-3",
                      "bg-pixels-yellow-300",
                      "rounded-2xl",
                      "md:mr-24",
                      "mr-4"
                    )}
                  >
                    {item.prompt}
                  </div>
                  <div
                    className={css(
                      "p-3",
                      "bg-pixels-yellow-100",
                      "rounded-2xl",
                      "md:ml-24",
                      "ml-4",
                      "mt-4"
                    )}
                  >
                    {item.isLoading ? (
                      <PulseLoader size={6} color={"#d2cbbb"} />
                    ) : (
                      <div>
                        <div>{item.response}</div>
                        <div
                          className={css(
                            "text-xs",
                            "text-right",
                            "text-pixels-yellow-300",
                            "mt-0.5"
                          )}
                        >
                          {item.date.toLocaleString()}
                        </div>
                      </div>
                    )}
                  </div>
                </div>
              ))}
              {store.prompts.length === 0 && (
                <div
                  className={css(
                    "w-full",
                    "h-full",
                    "flex",
                    "justify-center",
                    "items-center"
                  )}
                >
                  <div className={css("text-pixels-yellow-300", "text-xl")}>
                    ownthedoge.com
                  </div>
                </div>
              )}
              {/* {isLoading && (
                <div
                  className={css("flex", "justify-center", "mt-4")}
                  ref={loadingRef}
                >
                  <PulseLoader size={6} color={"#d2cbbb"} />
                </div>
              )} */}
            </div>
            <div className={css("mt-2")}>
              <form onSubmit={handleFormSubmit}>
                <input
                  name={"search"}
                  className={css(
                    "w-full",
                    "px-4",
                    "py-3",
                    "outline-none",
                    "bg-[#efe8d3]",
                    "rounded-2xl",
                    "placeholder:text-pixels-yellow-400",
                    "font-bold"
                  )}
                  placeholder={"wow, you can ask me anything"}
                  value={value}
                  onChange={(e) => setValue(e.target.value)}
                />
              </form>
            </div>
          </div>
        </div>
      </main>
    </>
  );
}

interface Store {
  prompts: {
    prompt: string;
    response?: string;
    date: Date;
    id: number;
    isLoading: boolean;
  }[];
  post: (prompt: string) => Promise<any>;
}

const useStore = create<Store>((set) => ({
  prompts: [],
  post: async (prompt: string) => {
    try {
      const id = Math.random();
      set((prev) => ({
        prompts: [
          ...prev.prompts,
          { prompt, date: new Date(), isLoading: true, id },
        ],
      }));

      const prodBaseUrl = "https://doge-gpt-cea4f69d8b2b.herokuapp.com";
      const res = await fetch(`${prodBaseUrl}/prompt`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ prompt }),
      });
      if (res.ok) {
        const { data } = await res.json();
        set((prev) => {
          const prompts = [...prev.prompts];
          const index = prev.prompts.findIndex((item) => item.id === id);
          prompts[index].response = data;
          prompts[index].isLoading = false;
          return {
            prompts,
          };
        });
      } else {
        throw new Error("Response not ok");
      }
    } catch (e) {
      console.error(e);
    }
  },
}));
